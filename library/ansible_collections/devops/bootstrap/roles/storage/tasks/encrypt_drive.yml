---
- name: Fail if disk for encryption is not defined
  ansible.builtin.fail:
    msg: You need to provide disk to encrypt in format '/dev/sda'
  when: enc_drive_name is not defined or enc_drive_name is not match("/dev/.+")

- name: Check '{{ enc_drive_name }}' exists
  ansible.builtin.stat:
    path: "{{ enc_drive_name }}"
  register: drive_stat

- name: Fail if drive does not exists
  ansible.builtin.fail:
    msg: Drive '{{ enc_drive_name }}' does not exists
  when: not drive_stat.stat.exists

- name: Get root partition
  ansible.builtin.set_fact:
    root_partition: "{{ ansible_device_links['uuids']|dict2items|json_query(_query) }}"
  vars:
    root_device_uuid: "{{ ansible_mounts|json_query('[?mount == `/`].uuid | [0]') }}"
    _query: '[?contains(value, `{{ root_device_uuid }}`)].key | [0]'

- name: Fail if cannot get root partition info
  ansible.builtin.fail:
    msg: Cannot get root partition device
  when: root_partition == ""

- name: Fail if root partition is located on provided disk
  fail:
    msg: "{{ partition_prefix }}{{ item }} contains root"
  with_items: "{{ ansible_devices[enc_drive_name | replace(partition_prefix, '')]['partitions'] }}"
  when: item == root_partition

- name: Encrypt second drive
  community.crypto.luks_device:
    device: "{{ enc_drive_name }}"
    state: "present"
    passphrase: "{{ crypt_passphrase }}"
  become: true

